/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct MessagingApiApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> MessagingApiApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> MessagingApiApiClient<C> {
        MessagingApiApiClient {
            configuration,
        }
    }
}

pub trait MessagingApiApi: Send + Sync {
    fn broadcast(&self, broadcast_request: models::BroadcastRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>>;
    fn cancel_default_rich_menu(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn create_rich_menu(&self, rich_menu_request: models::RichMenuRequest) -> Pin<Box<dyn Future<Output = Result<models::RichMenuIdResponse, Error>> + Send>>;
    fn create_rich_menu_alias(&self, create_rich_menu_alias_request: models::CreateRichMenuAliasRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn delete_rich_menu(&self, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn delete_rich_menu_alias(&self, rich_menu_alias_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn get_aggregation_unit_name_list(&self, limit: Option<&str>, start: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::GetAggregationUnitNameListResponse, Error>> + Send>>;
    fn get_aggregation_unit_usage(&self, ) -> Pin<Box<dyn Future<Output = Result<models::GetAggregationUnitUsageResponse, Error>> + Send>>;
    fn get_bot_info(&self, ) -> Pin<Box<dyn Future<Output = Result<models::BotInfoResponse, Error>> + Send>>;
    fn get_default_rich_menu_id(&self, ) -> Pin<Box<dyn Future<Output = Result<models::RichMenuIdResponse, Error>> + Send>>;
    fn get_followers(&self, start: Option<&str>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::GetFollowersResponse, Error>> + Send>>;
    fn get_group_member_count(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GroupMemberCountResponse, Error>> + Send>>;
    fn get_group_member_profile(&self, group_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GroupUserProfileResponse, Error>> + Send>>;
    fn get_group_members_ids(&self, group_id: &str, start: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::MembersIdsResponse, Error>> + Send>>;
    fn get_group_summary(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GroupSummaryResponse, Error>> + Send>>;
    fn get_joined_membership_users(&self, membership_id: i32, start: Option<&str>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::GetJoinedMembershipUsersResponse, Error>> + Send>>;
    fn get_membership_list(&self, ) -> Pin<Box<dyn Future<Output = Result<models::MembershipListResponse, Error>> + Send>>;
    fn get_membership_subscription(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GetMembershipSubscriptionResponse, Error>> + Send>>;
    fn get_message_quota(&self, ) -> Pin<Box<dyn Future<Output = Result<models::MessageQuotaResponse, Error>> + Send>>;
    fn get_message_quota_consumption(&self, ) -> Pin<Box<dyn Future<Output = Result<models::QuotaConsumptionResponse, Error>> + Send>>;
    fn get_narrowcast_progress(&self, request_id: &str) -> Pin<Box<dyn Future<Output = Result<models::NarrowcastProgressResponse, Error>> + Send>>;
    fn get_number_of_sent_broadcast_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>>;
    fn get_number_of_sent_multicast_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>>;
    fn get_number_of_sent_push_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>>;
    fn get_number_of_sent_reply_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>>;
    fn get_pnp_message_statistics(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>>;
    fn get_profile(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::UserProfileResponse, Error>> + Send>>;
    fn get_rich_menu(&self, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuResponse, Error>> + Send>>;
    fn get_rich_menu_alias(&self, rich_menu_alias_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuAliasResponse, Error>> + Send>>;
    fn get_rich_menu_alias_list(&self, ) -> Pin<Box<dyn Future<Output = Result<models::RichMenuAliasListResponse, Error>> + Send>>;
    fn get_rich_menu_batch_progress(&self, request_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuBatchProgressResponse, Error>> + Send>>;
    fn get_rich_menu_id_of_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuIdResponse, Error>> + Send>>;
    fn get_rich_menu_list(&self, ) -> Pin<Box<dyn Future<Output = Result<models::RichMenuListResponse, Error>> + Send>>;
    fn get_room_member_count(&self, room_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RoomMemberCountResponse, Error>> + Send>>;
    fn get_room_member_profile(&self, room_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RoomUserProfileResponse, Error>> + Send>>;
    fn get_room_members_ids(&self, room_id: &str, start: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::MembersIdsResponse, Error>> + Send>>;
    fn get_webhook_endpoint(&self, ) -> Pin<Box<dyn Future<Output = Result<models::GetWebhookEndpointResponse, Error>> + Send>>;
    fn issue_link_token(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::IssueLinkTokenResponse, Error>> + Send>>;
    fn leave_group(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn leave_room(&self, room_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn link_rich_menu_id_to_user(&self, user_id: &str, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn link_rich_menu_id_to_users(&self, rich_menu_bulk_link_request: models::RichMenuBulkLinkRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn mark_messages_as_read(&self, mark_messages_as_read_request: models::MarkMessagesAsReadRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn multicast(&self, multicast_request: models::MulticastRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>>;
    fn narrowcast(&self, narrowcast_request: models::NarrowcastRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>>;
    fn push_message(&self, push_message_request: models::PushMessageRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::PushMessageResponse, Error>> + Send>>;
    fn push_messages_by_phone(&self, pnp_messages_request: models::PnpMessagesRequest, x_line_delivery_tag: Option<&str>) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn reply_message(&self, reply_message_request: models::ReplyMessageRequest) -> Pin<Box<dyn Future<Output = Result<models::ReplyMessageResponse, Error>> + Send>>;
    fn rich_menu_batch(&self, rich_menu_batch_request: models::RichMenuBatchRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn set_default_rich_menu(&self, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn set_webhook_endpoint(&self, set_webhook_endpoint_request: models::SetWebhookEndpointRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn show_loading_animation(&self, show_loading_animation_request: models::ShowLoadingAnimationRequest) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>>;
    fn test_webhook_endpoint(&self, test_webhook_endpoint_request: Option<models::TestWebhookEndpointRequest>) -> Pin<Box<dyn Future<Output = Result<models::TestWebhookEndpointResponse, Error>> + Send>>;
    fn unlink_rich_menu_id_from_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn unlink_rich_menu_id_from_users(&self, rich_menu_bulk_unlink_request: models::RichMenuBulkUnlinkRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn update_rich_menu_alias(&self, rich_menu_alias_id: &str, update_rich_menu_alias_request: models::UpdateRichMenuAliasRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn validate_broadcast(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn validate_multicast(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn validate_narrowcast(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn validate_push(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn validate_reply(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn validate_rich_menu_batch_request(&self, rich_menu_batch_request: models::RichMenuBatchRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn validate_rich_menu_object(&self, rich_menu_request: models::RichMenuRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
}

impl<C: Connect>MessagingApiApi for MessagingApiApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn broadcast(&self, broadcast_request: models::BroadcastRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/broadcast".to_string())
        ;
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(broadcast_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn cancel_default_rich_menu(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/v2/bot/user/all/richmenu".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_rich_menu(&self, rich_menu_request: models::RichMenuRequest) -> Pin<Box<dyn Future<Output = Result<models::RichMenuIdResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu".to_string())
        ;
        req = req.with_body_param(rich_menu_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_rich_menu_alias(&self, create_rich_menu_alias_request: models::CreateRichMenuAliasRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu/alias".to_string())
        ;
        req = req.with_body_param(create_rich_menu_alias_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_rich_menu(&self, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/v2/bot/richmenu/{richMenuId}".to_string())
        ;
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_rich_menu_alias(&self, rich_menu_alias_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/v2/bot/richmenu/alias/{richMenuAliasId}".to_string())
        ;
        req = req.with_path_param("richMenuAliasId".to_string(), rich_menu_alias_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_aggregation_unit_name_list(&self, limit: Option<&str>, start: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::GetAggregationUnitNameListResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/aggregation/list".to_string())
        ;
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_aggregation_unit_usage(&self, ) -> Pin<Box<dyn Future<Output = Result<models::GetAggregationUnitUsageResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/aggregation/info".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_bot_info(&self, ) -> Pin<Box<dyn Future<Output = Result<models::BotInfoResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/info".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_default_rich_menu_id(&self, ) -> Pin<Box<dyn Future<Output = Result<models::RichMenuIdResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/user/all/richmenu".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_followers(&self, start: Option<&str>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::GetFollowersResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/followers/ids".to_string())
        ;
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_member_count(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GroupMemberCountResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/group/{groupId}/members/count".to_string())
        ;
        req = req.with_path_param("groupId".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_member_profile(&self, group_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GroupUserProfileResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/group/{groupId}/member/{userId}".to_string())
        ;
        req = req.with_path_param("groupId".to_string(), group_id.to_string());
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_members_ids(&self, group_id: &str, start: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::MembersIdsResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/group/{groupId}/members/ids".to_string())
        ;
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }
        req = req.with_path_param("groupId".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_summary(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GroupSummaryResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/group/{groupId}/summary".to_string())
        ;
        req = req.with_path_param("groupId".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_joined_membership_users(&self, membership_id: i32, start: Option<&str>, limit: Option<i32>) -> Pin<Box<dyn Future<Output = Result<models::GetJoinedMembershipUsersResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/membership/{membershipId}/users/ids".to_string())
        ;
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }
        req = req.with_path_param("membershipId".to_string(), membership_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_membership_list(&self, ) -> Pin<Box<dyn Future<Output = Result<models::MembershipListResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/membership/list".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_membership_subscription(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::GetMembershipSubscriptionResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/membership/subscription/{userId}".to_string())
        ;
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_message_quota(&self, ) -> Pin<Box<dyn Future<Output = Result<models::MessageQuotaResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/quota".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_message_quota_consumption(&self, ) -> Pin<Box<dyn Future<Output = Result<models::QuotaConsumptionResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/quota/consumption".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_narrowcast_progress(&self, request_id: &str) -> Pin<Box<dyn Future<Output = Result<models::NarrowcastProgressResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/progress/narrowcast".to_string())
        ;
        req = req.with_query_param("requestId".to_string(), request_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_broadcast_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/delivery/broadcast".to_string())
        ;
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_multicast_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/delivery/multicast".to_string())
        ;
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_push_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/delivery/push".to_string())
        ;
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_reply_messages(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/delivery/reply".to_string())
        ;
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_pnp_message_statistics(&self, date: &str) -> Pin<Box<dyn Future<Output = Result<models::NumberOfMessagesResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/message/delivery/pnp".to_string())
        ;
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_profile(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::UserProfileResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/profile/{userId}".to_string())
        ;
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu(&self, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/richmenu/{richMenuId}".to_string())
        ;
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_alias(&self, rich_menu_alias_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuAliasResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/richmenu/alias/{richMenuAliasId}".to_string())
        ;
        req = req.with_path_param("richMenuAliasId".to_string(), rich_menu_alias_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_alias_list(&self, ) -> Pin<Box<dyn Future<Output = Result<models::RichMenuAliasListResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/richmenu/alias/list".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_batch_progress(&self, request_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuBatchProgressResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/richmenu/progress/batch".to_string())
        ;
        req = req.with_query_param("requestId".to_string(), request_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_id_of_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RichMenuIdResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/user/{userId}/richmenu".to_string())
        ;
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_list(&self, ) -> Pin<Box<dyn Future<Output = Result<models::RichMenuListResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/richmenu/list".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_room_member_count(&self, room_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RoomMemberCountResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/room/{roomId}/members/count".to_string())
        ;
        req = req.with_path_param("roomId".to_string(), room_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_room_member_profile(&self, room_id: &str, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::RoomUserProfileResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/room/{roomId}/member/{userId}".to_string())
        ;
        req = req.with_path_param("roomId".to_string(), room_id.to_string());
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_room_members_ids(&self, room_id: &str, start: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::MembersIdsResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/room/{roomId}/members/ids".to_string())
        ;
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }
        req = req.with_path_param("roomId".to_string(), room_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_webhook_endpoint(&self, ) -> Pin<Box<dyn Future<Output = Result<models::GetWebhookEndpointResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/channel/webhook/endpoint".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn issue_link_token(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<models::IssueLinkTokenResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/user/{userId}/linkToken".to_string())
        ;
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn leave_group(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/group/{groupId}/leave".to_string())
        ;
        req = req.with_path_param("groupId".to_string(), group_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn leave_room(&self, room_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/room/{roomId}/leave".to_string())
        ;
        req = req.with_path_param("roomId".to_string(), room_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn link_rich_menu_id_to_user(&self, user_id: &str, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/user/{userId}/richmenu/{richMenuId}".to_string())
        ;
        req = req.with_path_param("userId".to_string(), user_id.to_string());
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn link_rich_menu_id_to_users(&self, rich_menu_bulk_link_request: models::RichMenuBulkLinkRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu/bulk/link".to_string())
        ;
        req = req.with_body_param(rich_menu_bulk_link_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn mark_messages_as_read(&self, mark_messages_as_read_request: models::MarkMessagesAsReadRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/markAsRead".to_string())
        ;
        req = req.with_body_param(mark_messages_as_read_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn multicast(&self, multicast_request: models::MulticastRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/multicast".to_string())
        ;
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(multicast_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn narrowcast(&self, narrowcast_request: models::NarrowcastRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/narrowcast".to_string())
        ;
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(narrowcast_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn push_message(&self, push_message_request: models::PushMessageRequest, x_line_retry_key: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::PushMessageResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/push".to_string())
        ;
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(push_message_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn push_messages_by_phone(&self, pnp_messages_request: models::PnpMessagesRequest, x_line_delivery_tag: Option<&str>) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/bot/pnp/push".to_string())
        ;
        if let Some(param_value) = x_line_delivery_tag {
            req = req.with_header_param("X-Line-Delivery-Tag".to_string(), param_value.to_string());
        }
        req = req.with_body_param(pnp_messages_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn reply_message(&self, reply_message_request: models::ReplyMessageRequest) -> Pin<Box<dyn Future<Output = Result<models::ReplyMessageResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/reply".to_string())
        ;
        req = req.with_body_param(reply_message_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn rich_menu_batch(&self, rich_menu_batch_request: models::RichMenuBatchRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu/batch".to_string())
        ;
        req = req.with_body_param(rich_menu_batch_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_default_rich_menu(&self, rich_menu_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/user/all/richmenu/{richMenuId}".to_string())
        ;
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_webhook_endpoint(&self, set_webhook_endpoint_request: models::SetWebhookEndpointRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/v2/bot/channel/webhook/endpoint".to_string())
        ;
        req = req.with_body_param(set_webhook_endpoint_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn show_loading_animation(&self, show_loading_animation_request: models::ShowLoadingAnimationRequest) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/chat/loading/start".to_string())
        ;
        req = req.with_body_param(show_loading_animation_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn test_webhook_endpoint(&self, test_webhook_endpoint_request: Option<models::TestWebhookEndpointRequest>) -> Pin<Box<dyn Future<Output = Result<models::TestWebhookEndpointResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/channel/webhook/test".to_string())
        ;
        req = req.with_body_param(test_webhook_endpoint_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn unlink_rich_menu_id_from_user(&self, user_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/v2/bot/user/{userId}/richmenu".to_string())
        ;
        req = req.with_path_param("userId".to_string(), user_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn unlink_rich_menu_id_from_users(&self, rich_menu_bulk_unlink_request: models::RichMenuBulkUnlinkRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu/bulk/unlink".to_string())
        ;
        req = req.with_body_param(rich_menu_bulk_unlink_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_rich_menu_alias(&self, rich_menu_alias_id: &str, update_rich_menu_alias_request: models::UpdateRichMenuAliasRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu/alias/{richMenuAliasId}".to_string())
        ;
        req = req.with_path_param("richMenuAliasId".to_string(), rich_menu_alias_id.to_string());
        req = req.with_body_param(update_rich_menu_alias_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_broadcast(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/validate/broadcast".to_string())
        ;
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_multicast(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/validate/multicast".to_string())
        ;
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_narrowcast(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/validate/narrowcast".to_string())
        ;
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_push(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/validate/push".to_string())
        ;
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_reply(&self, validate_message_request: models::ValidateMessageRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/message/validate/reply".to_string())
        ;
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_rich_menu_batch_request(&self, rich_menu_batch_request: models::RichMenuBatchRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu/validate/batch".to_string())
        ;
        req = req.with_body_param(rich_menu_batch_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_rich_menu_object(&self, rich_menu_request: models::RichMenuRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu/validate".to_string())
        ;
        req = req.with_body_param(rich_menu_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
