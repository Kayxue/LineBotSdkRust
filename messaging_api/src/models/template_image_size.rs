/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TemplateImageSize : Size of the image.  This is only for the `imageSize` in ButtonsTemplate. Specify one of the following values:  `cover`: The image fills the entire image area. Parts of the image that do not fit in the area are not displayed. `contain`: The entire image is displayed in the image area. A background is displayed in the unused areas to the left and right of vertical images and in the areas above and below horizontal images. 
/// Size of the image.  This is only for the `imageSize` in ButtonsTemplate. Specify one of the following values:  `cover`: The image fills the entire image area. Parts of the image that do not fit in the area are not displayed. `contain`: The entire image is displayed in the image area. A background is displayed in the unused areas to the left and right of vertical images and in the areas above and below horizontal images. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TemplateImageSize {
    #[serde(rename = "cover")]
    Cover,
    #[serde(rename = "contain")]
    Contain,

}

impl std::fmt::Display for TemplateImageSize {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Cover => write!(f, "cover"),
            Self::Contain => write!(f, "contain"),
        }
    }
}

impl Default for TemplateImageSize {
    fn default() -> TemplateImageSize {
        Self::Cover
    }
}

