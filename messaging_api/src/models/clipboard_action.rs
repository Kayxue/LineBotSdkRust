/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClipboardAction {
    /// Type of action
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Label for the action.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Text that is copied to the clipboard. Max character limit: 1000 
    #[serde(rename = "clipboardText")]
    pub clipboard_text: String,
}

impl ClipboardAction {
    pub fn new(clipboard_text: String) -> ClipboardAction {
        ClipboardAction {
            r#type: None,
            label: None,
            clipboard_text,
        }
    }
}

