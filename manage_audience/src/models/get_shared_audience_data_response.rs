/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetSharedAudienceDataResponse : Get audience data
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetSharedAudienceDataResponse {
    #[serde(rename = "audienceGroup", skip_serializing_if = "Option::is_none")]
    pub audience_group: Option<Box<models::AudienceGroup>>,
    /// An array of jobs. This array is used to keep track of each attempt to add new user IDs or IFAs to an audience for uploading user IDs. Empty array is returned for any other type of audience. Max: 50 
    #[serde(rename = "jobs", skip_serializing_if = "Option::is_none")]
    pub jobs: Option<Vec<models::AudienceGroupJob>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<models::DetailedOwner>>,
}

impl GetSharedAudienceDataResponse {
    /// Get audience data
    pub fn new() -> GetSharedAudienceDataResponse {
        GetSharedAudienceDataResponse {
            audience_group: None,
            jobs: None,
            owner: None,
        }
    }
}

