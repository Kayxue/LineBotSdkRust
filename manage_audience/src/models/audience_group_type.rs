/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AudienceGroupType : Audience group type
/// Audience group type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AudienceGroupType {
    #[serde(rename = "UPLOAD")]
    Upload,
    #[serde(rename = "CLICK")]
    Click,
    #[serde(rename = "IMP")]
    Imp,
    #[serde(rename = "CHAT_TAG")]
    ChatTag,
    #[serde(rename = "FRIEND_PATH")]
    FriendPath,
    #[serde(rename = "RESERVATION")]
    Reservation,
    #[serde(rename = "APP_EVENT")]
    AppEvent,
    #[serde(rename = "VIDEO_VIEW")]
    VideoView,
    #[serde(rename = "WEBTRAFFIC")]
    Webtraffic,
    #[serde(rename = "IMAGE_CLICK")]
    ImageClick,
    #[serde(rename = "RICHMENU_IMP")]
    RichmenuImp,
    #[serde(rename = "RICHMENU_CLICK")]
    RichmenuClick,

}

impl std::fmt::Display for AudienceGroupType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Upload => write!(f, "UPLOAD"),
            Self::Click => write!(f, "CLICK"),
            Self::Imp => write!(f, "IMP"),
            Self::ChatTag => write!(f, "CHAT_TAG"),
            Self::FriendPath => write!(f, "FRIEND_PATH"),
            Self::Reservation => write!(f, "RESERVATION"),
            Self::AppEvent => write!(f, "APP_EVENT"),
            Self::VideoView => write!(f, "VIDEO_VIEW"),
            Self::Webtraffic => write!(f, "WEBTRAFFIC"),
            Self::ImageClick => write!(f, "IMAGE_CLICK"),
            Self::RichmenuImp => write!(f, "RICHMENU_IMP"),
            Self::RichmenuClick => write!(f, "RICHMENU_CLICK"),
        }
    }
}

impl Default for AudienceGroupType {
    fn default() -> AudienceGroupType {
        Self::Upload
    }
}

