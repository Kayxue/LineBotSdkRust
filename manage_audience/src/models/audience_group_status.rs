/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AudienceGroupStatus : Status
/// Status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AudienceGroupStatus {
    #[serde(rename = "IN_PROGRESS")]
    InProgress,
    #[serde(rename = "READY")]
    Ready,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "EXPIRED")]
    Expired,
    #[serde(rename = "INACTIVE")]
    Inactive,
    #[serde(rename = "ACTIVATING")]
    Activating,

}

impl std::fmt::Display for AudienceGroupStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::InProgress => write!(f, "IN_PROGRESS"),
            Self::Ready => write!(f, "READY"),
            Self::Failed => write!(f, "FAILED"),
            Self::Expired => write!(f, "EXPIRED"),
            Self::Inactive => write!(f, "INACTIVE"),
            Self::Activating => write!(f, "ACTIVATING"),
        }
    }
}

impl Default for AudienceGroupStatus {
    fn default() -> AudienceGroupStatus {
        Self::InProgress
    }
}

