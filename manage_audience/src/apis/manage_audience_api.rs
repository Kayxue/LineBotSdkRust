/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct ManageAudienceApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> ManageAudienceApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> ManageAudienceApiClient<C> {
        ManageAudienceApiClient {
            configuration,
        }
    }
}

pub trait ManageAudienceApi: Send + Sync {
    fn activate_audience_group(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn add_audience_to_audience_group(&self, add_audience_to_audience_group_request: models::AddAudienceToAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn create_audience_group(&self, create_audience_group_request: models::CreateAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<models::CreateAudienceGroupResponse, Error>> + Send>>;
    fn create_click_based_audience_group(&self, create_click_based_audience_group_request: models::CreateClickBasedAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<models::CreateClickBasedAudienceGroupResponse, Error>> + Send>>;
    fn create_imp_based_audience_group(&self, create_imp_based_audience_group_request: models::CreateImpBasedAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<models::CreateImpBasedAudienceGroupResponse, Error>> + Send>>;
    fn delete_audience_group(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn get_audience_data(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<models::GetAudienceDataResponse, Error>> + Send>>;
    fn get_audience_group_authority_level(&self, ) -> Pin<Box<dyn Future<Output = Result<models::GetAudienceGroupAuthorityLevelResponse, Error>> + Send>>;
    fn get_audience_groups(&self, page: i64, description: Option<&str>, status: Option<models::AudienceGroupStatus>, size: Option<i64>, includes_external_public_groups: Option<bool>, create_route: Option<models::AudienceGroupCreateRoute>) -> Pin<Box<dyn Future<Output = Result<models::GetAudienceGroupsResponse, Error>> + Send>>;
    fn get_shared_audience_data(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<models::GetSharedAudienceDataResponse, Error>> + Send>>;
    fn get_shared_audience_groups(&self, page: i64, description: Option<&str>, status: Option<models::AudienceGroupStatus>, size: Option<i64>, create_route: Option<models::AudienceGroupCreateRoute>) -> Pin<Box<dyn Future<Output = Result<models::GetSharedAudienceGroupsResponse, Error>> + Send>>;
    fn update_audience_group_authority_level(&self, update_audience_group_authority_level_request: models::UpdateAudienceGroupAuthorityLevelRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn update_audience_group_description(&self, audience_group_id: i64, update_audience_group_description_request: models::UpdateAudienceGroupDescriptionRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
}

impl<C: Connect>ManageAudienceApi for ManageAudienceApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn activate_audience_group(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/v2/bot/audienceGroup/{audienceGroupId}/activate".to_string())
        ;
        req = req.with_path_param("audienceGroupId".to_string(), audience_group_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn add_audience_to_audience_group(&self, add_audience_to_audience_group_request: models::AddAudienceToAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/v2/bot/audienceGroup/upload".to_string())
        ;
        req = req.with_body_param(add_audience_to_audience_group_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_audience_group(&self, create_audience_group_request: models::CreateAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<models::CreateAudienceGroupResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/audienceGroup/upload".to_string())
        ;
        req = req.with_body_param(create_audience_group_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_click_based_audience_group(&self, create_click_based_audience_group_request: models::CreateClickBasedAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<models::CreateClickBasedAudienceGroupResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/audienceGroup/click".to_string())
        ;
        req = req.with_body_param(create_click_based_audience_group_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_imp_based_audience_group(&self, create_imp_based_audience_group_request: models::CreateImpBasedAudienceGroupRequest) -> Pin<Box<dyn Future<Output = Result<models::CreateImpBasedAudienceGroupResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/audienceGroup/imp".to_string())
        ;
        req = req.with_body_param(create_imp_based_audience_group_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_audience_group(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/v2/bot/audienceGroup/{audienceGroupId}".to_string())
        ;
        req = req.with_path_param("audienceGroupId".to_string(), audience_group_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_audience_data(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<models::GetAudienceDataResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/audienceGroup/{audienceGroupId}".to_string())
        ;
        req = req.with_path_param("audienceGroupId".to_string(), audience_group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_audience_group_authority_level(&self, ) -> Pin<Box<dyn Future<Output = Result<models::GetAudienceGroupAuthorityLevelResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/audienceGroup/authorityLevel".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_audience_groups(&self, page: i64, description: Option<&str>, status: Option<models::AudienceGroupStatus>, size: Option<i64>, includes_external_public_groups: Option<bool>, create_route: Option<models::AudienceGroupCreateRoute>) -> Pin<Box<dyn Future<Output = Result<models::GetAudienceGroupsResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/audienceGroup/list".to_string())
        ;
        req = req.with_query_param("page".to_string(), page.to_string());
        if let Some(ref s) = description {
            let query_value = s.to_string();
            req = req.with_query_param("description".to_string(), query_value);
        }
        if let Some(ref s) = status {
            let query_value = s.to_string();
            req = req.with_query_param("status".to_string(), query_value);
        }
        if let Some(ref s) = size {
            let query_value = s.to_string();
            req = req.with_query_param("size".to_string(), query_value);
        }
        if let Some(ref s) = includes_external_public_groups {
            let query_value = s.to_string();
            req = req.with_query_param("includesExternalPublicGroups".to_string(), query_value);
        }
        if let Some(ref s) = create_route {
            let query_value = s.to_string();
            req = req.with_query_param("createRoute".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_shared_audience_data(&self, audience_group_id: i64) -> Pin<Box<dyn Future<Output = Result<models::GetSharedAudienceDataResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/audienceGroup/shared/{audienceGroupId}".to_string())
        ;
        req = req.with_path_param("audienceGroupId".to_string(), audience_group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_shared_audience_groups(&self, page: i64, description: Option<&str>, status: Option<models::AudienceGroupStatus>, size: Option<i64>, create_route: Option<models::AudienceGroupCreateRoute>) -> Pin<Box<dyn Future<Output = Result<models::GetSharedAudienceGroupsResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/v2/bot/audienceGroup/shared/list".to_string())
        ;
        req = req.with_query_param("page".to_string(), page.to_string());
        if let Some(ref s) = description {
            let query_value = s.to_string();
            req = req.with_query_param("description".to_string(), query_value);
        }
        if let Some(ref s) = status {
            let query_value = s.to_string();
            req = req.with_query_param("status".to_string(), query_value);
        }
        if let Some(ref s) = size {
            let query_value = s.to_string();
            req = req.with_query_param("size".to_string(), query_value);
        }
        if let Some(ref s) = create_route {
            let query_value = s.to_string();
            req = req.with_query_param("createRoute".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_audience_group_authority_level(&self, update_audience_group_authority_level_request: models::UpdateAudienceGroupAuthorityLevelRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/v2/bot/audienceGroup/authorityLevel".to_string())
        ;
        req = req.with_body_param(update_audience_group_authority_level_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_audience_group_description(&self, audience_group_id: i64, update_audience_group_description_request: models::UpdateAudienceGroupDescriptionRequest) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/v2/bot/audienceGroup/{audienceGroupId}/updateDescription".to_string())
        ;
        req = req.with_path_param("audienceGroupId".to_string(), audience_group_id.to_string());
        req = req.with_body_param(update_audience_group_description_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
