/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AddAudienceToAudienceGroupRequest : Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddAudienceToAudienceGroupRequest {
    /// The audience ID.
    #[serde(rename = "audienceGroupId", skip_serializing_if = "Option::is_none")]
    pub audience_group_id: Option<i64>,
    /// The audience's name.
    #[serde(rename = "uploadDescription", skip_serializing_if = "Option::is_none")]
    pub upload_description: Option<String>,
    /// An array of up to 10,000 user IDs or IFAs.
    #[serde(rename = "audiences", skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<models::Audience>>,
}

impl AddAudienceToAudienceGroupRequest {
    /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
    pub fn new() -> AddAudienceToAudienceGroupRequest {
        AddAudienceToAudienceGroupRequest {
            audience_group_id: None,
            upload_description: None,
            audiences: None,
        }
    }
}

