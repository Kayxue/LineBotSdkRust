/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateAudienceGroupRequest : Create audience for uploading user IDs (by JSON)
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateAudienceGroupRequest {
    /// The audience's name. This is case-insensitive, meaning AUDIENCE and audience are considered identical. Max character limit: 120 
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// To specify recipients by IFAs: set true. To specify recipients by user IDs: set false or omit isIfaAudience property. 
    #[serde(rename = "isIfaAudience", skip_serializing_if = "Option::is_none")]
    pub is_ifa_audience: Option<bool>,
    /// The description to register for the job (in jobs[].description). 
    #[serde(rename = "uploadDescription", skip_serializing_if = "Option::is_none")]
    pub upload_description: Option<String>,
    /// An array of user IDs or IFAs. Max number: 10,000 
    #[serde(rename = "audiences", skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<models::Audience>>,
}

impl CreateAudienceGroupRequest {
    /// Create audience for uploading user IDs (by JSON)
    pub fn new() -> CreateAudienceGroupRequest {
        CreateAudienceGroupRequest {
            description: None,
            is_ifa_audience: None,
            upload_description: None,
            audiences: None,
        }
    }
}

