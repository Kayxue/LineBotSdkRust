/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlexVideo {
    #[serde(rename = "type")]
    pub r#type: Option<String>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "previewUrl")]
    pub preview_url: String,
    #[serde(rename = "altContent")]
    pub alt_content: Box<models::FlexComponent>,
    #[serde(rename = "aspectRatio", skip_serializing_if = "Option::is_none")]
    pub aspect_ratio: Option<String>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Box<models::Action>>,
}

impl FlexVideo {
    pub fn new(
        r#type: String,
        url: String,
        preview_url: String,
        alt_content: models::FlexComponent,
    ) -> FlexVideo {
        FlexVideo {
            r#type: Some(r#type),
            url,
            preview_url,
            alt_content: Box::new(alt_content),
            aspect_ratio: None,
            action: None,
        }
    }
}
