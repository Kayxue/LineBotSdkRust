/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RichMenuBatchRequest {
    /// Array of Rich menu operation object...
    #[serde(rename = "operations")]
    pub operations: Vec<models::RichMenuBatchOperation>,
    /// Key for retry. Key value is a string matching the regular expression pattern
    #[serde(rename = "resumeRequestKey", skip_serializing_if = "Option::is_none")]
    pub resume_request_key: Option<String>,
}

impl RichMenuBatchRequest {
    pub fn new(operations: Vec<models::RichMenuBatchOperation>) -> RichMenuBatchRequest {
        RichMenuBatchRequest {
            operations,
            resume_request_key: None,
        }
    }
}

