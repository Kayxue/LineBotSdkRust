/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FlexBoxBorderWidth : Width of box border. This is only for `borderWidth` in FlexBox. A value of none means that borders are not rendered; the other values are listed in order of increasing width. 
/// Width of box border. This is only for `borderWidth` in FlexBox. A value of none means that borders are not rendered; the other values are listed in order of increasing width. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlexBoxBorderWidth {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "light")]
    Light,
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "semi-bold")]
    SemiBold,
    #[serde(rename = "bold")]
    Bold,

}

impl std::fmt::Display for FlexBoxBorderWidth {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::None => write!(f, "none"),
            Self::Light => write!(f, "light"),
            Self::Normal => write!(f, "normal"),
            Self::Medium => write!(f, "medium"),
            Self::SemiBold => write!(f, "semi-bold"),
            Self::Bold => write!(f, "bold"),
        }
    }
}

impl Default for FlexBoxBorderWidth {
    fn default() -> FlexBoxBorderWidth {
        Self::None
    }
}

