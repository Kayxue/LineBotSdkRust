/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlexBoxLinearGradient {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "angle", skip_serializing_if = "Option::is_none")]
    pub angle: Option<String>,
    #[serde(rename = "startColor", skip_serializing_if = "Option::is_none")]
    pub start_color: Option<String>,
    #[serde(rename = "endColor", skip_serializing_if = "Option::is_none")]
    pub end_color: Option<String>,
    #[serde(rename = "centerColor", skip_serializing_if = "Option::is_none")]
    pub center_color: Option<String>,
    #[serde(rename = "centerPosition", skip_serializing_if = "Option::is_none")]
    pub center_position: Option<String>,
}

impl FlexBoxLinearGradient {
    pub fn new(r#type: String) -> FlexBoxLinearGradient {
        FlexBoxLinearGradient {
            r#type: Some(r#type),
            angle: None,
            start_color: None,
            end_color: None,
            center_color: None,
            center_position: None,
        }
    }
}
